#include <iostream>
using namespace std;
const int MAX = 64;

//用来表示每根柱子的信息
struct st{
      int s[MAX]; //柱子上的圆盘存储情况
      int top;
      char name; //柱子的名字，可以是A，B，C中的一个
      int Top()
      {
            return s[top];
      }
      int Pop()
      {
            return s[top--];
      }
      void Push(int x)
      {
            s[++top]=x;
      }
};
long Pow(int x,int y)
{
    long sum=1;
    for (int i=0;i<y;i++)
        sum *=x;
    return sum;
}
void Creat(st a[], int n)
{
    a[0].name='A';
    a[0].top=n-1;
    //把所有的圆盘按从大到小的顺序放在柱子A上
    for (int i=0;i<n;i++)
        a[0].s[i]=n-i;
      //柱子B，C上开始没有没有圆盘
    a[1].top=a[2].top=0;
    for (int i=0; i<n; i++)
        a[1].s[i]=a[2].s[i]=0;
     //若n为偶数，按顺时针方向依次摆放 A B C
    if (n%2 == 0)
    {
        a[1].name='B';
        a[2].name='C';
    }
    else  //若n为奇数，按顺时针方向依次摆放 A C B
    {
        a[1].name='C';
        a[2].name='B';
    }
}
void Hannuota(st a[], long max)
{
    int k=0; //累计移动的次数
    int i=0;
    int c;
    while (k<max)
    {
    //按顺时针方向把圆盘1移动到下一根柱子
        c=a[i%3].Pop();
        a[(i+1)%3].Push(c);
        cout<<++k<<": "<<"Move disk "<<c<<" from "<<a[i%3].name<<" to "<<a[(i+1)%3].name<<endl;
        i++;
       //把另外两根柱子上可以移动的圆盘移动到新的柱子上
        if (k<max)
        {  //把非空柱子上的圆盘移动到空柱子上，当两根柱子都为空时，移动较小的圆盘
            if (a[(i+1)%3].Top()==0||a[(i-1)%3].Top()>0&&a[(i+1)%3].Top()>a[(i-1)%3].Top())
            {
                c=a[(i-1)%3].Pop();
                a[(i+1)%3].Push(c);
                cout<<++k<<": "<<"Move disk "<<c<<" from "<<a[(i-1)%3].name<<" to "<<a[(i+1)%3].name<<endl;
            }
            else
            {
               c=a[(i+1)%3].Pop();
               a[(i-1)%3].Push(c);
               cout<<++k<<": "<<"Move disk "<<c<<" from "<<a[(i+1)%3].name<<" to "<<a[(i-1)%3].name<<endl;
            }
        }
    }
}
int main()
{
      int n;
      cin>>n; //输入圆盘的个数
      st a[3];
      Creat(a,n);
      long max=Pow(2,n)-1;
      Hannuota(a,max);
      return 0;
}
